/*
 * Copyright (C) 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.common.collect;

import com.google.common.base.Nullable;
import com.google.common.base.Objects;

import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

/**
 * Implementation of {@link Multimap} that does not allow duplicate key-value
 * entries and that returns collections whose iterators follow the ordering in
 * which the data was added to the multimap.
 *
 * <p>The collections returned by {@code keySet}, {@code keys}, and {@code
 * asMap} iterate through the keys in the order they were first added to the
 * multimap. Similarly, {@code get}, {@code removeAll}, and {@code
 * replaceValues} return collections that iterate through the values in the
 * order they were added. The collections generated by {@code entries} and
 * {@code values} iterate across the key-value mappings in the order they were
 * added to the multimap, overriding the {@link AbstractMultimap} iteration
 * ordering.
 *
 * <p>The iteration ordering of the collections generated by {@code keySet},
 * {@code keys}, and {@code asMap} has a few subtleties. As long as the set of
 * keys remains unchanged, adding or removing mappings does not affect the key
 * iteration order. However, if you remove all values associated with a key and
 * then add the key back to the multimap, that key will come last in the key
 * iteration order.
 *
 * <p>The multimap does not store duplicate key-value pairs. Adding a new
 * key-value pair equal to an existing key-value pair has no effect.
 *
 * <p>Keys and values may be null.
 *
 * <p>These methods runs in constant time: {@code asMap}, {@code containsEntry},
 * {@code containsKey}, {@code entries}, {@code get}, {@code isEmpty}, {@code
 * keySet}, {@code put}, {@code remove}, {@code removeAll}, {@code size}, and
 * {@code values}. The processing time of the {@code putAll} and {@code
 * removeAll} methods is proportional to the number of added values.  The {@code
 * containsValue}, and {@code keys} runtime is proportional to the number of
 * distinct keys. The {@code clear}, {@code equals}, {@code hashCode}, {@code
 * toString} and {@code clone} processing time scales with the total number of
 * values in the multimap.
 *
 * <p>This class is not threadsafe when any concurrent operations update the
 * multimap. Concurrent read operations will work correctly. To allow concurrent
 * update operations, wrap your multimap with a call to {@link
 * Multimaps#synchronizedSetMultimap}.
 *
 * @author jlevy@google.com (Jared Levy)
 */
public final class LinkedHashMultimap<K,V> extends
    AbstractSetMultimap<K,V> implements Cloneable {
  private static final long serialVersionUID = -7860829607800920333L;

  /**
   * Map entries with an iteration order corresponding to the order in which the
   * key-value pairs were added to the multimap.
   */
  private Collection<Map.Entry<K,V>> linkedEntries = Sets.newLinkedHashSet();

  /** Constructs an empty {@code LinkedHashMultimap}. */
  public LinkedHashMultimap() {
    super(new LinkedHashMap<K, Collection<V>>());
  }

  /**
   * Constructs a {@code LinkedHashMultimap} with the same mappings as the
   * specified {@code Multimap}. The input ordering in the constructed multimap
   * corresponds to {@link Multimap#entries()} of the input multimap.  If a
   * key-value mapping appears multiple times in the input multimap, it only
   * appears once in the constructed multimap.
   */
  public LinkedHashMultimap(Multimap<? extends K, ? extends V> multimap) {
    this();
    putAll(Objects.nonNull(multimap));
  }

  /**
   * Creates an empty {@link LinkedHashSet} for a collection of values for one
   * key.
   *
   * @return A new {@link LinkedHashSet} containing a collection of values for
   *     one key
   */
  @Override protected Set<V> createCollection() {
    return new LinkedHashSet<V>();
  }

  /**
   * Creates a decorated {@link LinkedHashSet} that also keeps track of the
   * order in which key-value pairs are added to the multimap.
   *
   * @param key key to associate with values in the collection
   * @return A new decorated {@link LinkedHashSet} containing a collection of
   *     values for one key
   */
  @Override protected Collection<V> createCollection(@Nullable K key) {
    return new SetDecorator(key, createCollection());
  }

  private class SetDecorator extends ForwardingSet<V> {
    private final K key;

    SetDecorator(K key, Set<V> delegate) {
      super(delegate);
      this.key = key;
    }

    /** Converts a value into a key/value map entry. */
    @SuppressWarnings("unchecked")
    private <E> Map.Entry<K, E> createEntry(@Nullable E value) {
      return Maps.immutableEntry(key, value);
    }

    /** Converts a collection of values into a list of key/value map entries. */
    private <E> Collection<Map.Entry<K, E>>
        createEntries(Collection<E> values) {
      Collection<Map.Entry<K, E>> entries =
          Lists.newArrayListWithCapacity(values.size());
      for (E value : values) {
        entries.add(createEntry(value));
      }
      return entries;
    }

    /**
     * Throws an {@link IllegalStateException} if an update operation does not
     * change the linked entries.
     */
    private void assertStateConsistency(boolean value) {
      if (!value) {
        throw new IllegalStateException(
          "LinkedHashMultimap entries are inconsistent");
      }
    }

    @Override public boolean add(@Nullable V value) {
      boolean changed = super.add(value);
      if (changed) {
        assertStateConsistency(linkedEntries.add(createEntry(value)));
      }
      return changed;
    }

    @Override public boolean addAll(Collection<? extends V> values) {
      boolean changed = super.addAll(values);
      if (changed) {
        assertStateConsistency(linkedEntries.addAll(createEntries(delegate())));
      }
      return changed;
    }

    @Override public void clear() {
      linkedEntries.removeAll(createEntries(delegate()));
      super.clear();
    }

    /**
     * Iterator wrapper whose {@code remove} method removes the key/value pair
     * from {@code linkedEntries} in addition to the delegate collection.
     */
    @Override public Iterator<V> iterator() {
      final Iterator<V> delegateIterator = super.iterator();

      return new Iterator<V>() {
        private V value;

        public boolean hasNext() {
          return delegateIterator.hasNext();
        }

        public V next() {
          value = delegateIterator.next();
          return value;
        }

        public void remove() {
          delegateIterator.remove();
          linkedEntries.remove(createEntry(value));
        }
      };
    }

    @Override public boolean remove(@Nullable Object value) {
      boolean changed = super.remove(value);
      if (changed) {
        /*
         * linkedEntries.remove() will return false when this method is called
         * by entries().iterator().remove()
         */
        linkedEntries.remove(createEntry(value));
      }
      return changed;
    }

    @Override public boolean removeAll(Collection<?> values) {
      boolean changed = super.removeAll(values);
      if (changed) {
        assertStateConsistency(linkedEntries.removeAll(createEntries(values)));
      }
      return changed;
    }

    @Override public boolean retainAll(Collection<?> values) {
      boolean changed = super.retainAll(values);
      if (changed) {
        assertStateConsistency(linkedEntries.retainAll(createEntries(values)));
      }
      return changed;
    }
  }

  /**
   * Generateds an iterator across map entries that follows the ordering in
   * which the key-value pairs were added to the multimap.
   *
   * @return A key-value iterator with the correct ordering
   */
  @Override protected Iterator<Map.Entry<K,V>> createEntryIterator() {
    final Iterator<Map.Entry<K,V>> delegateIterator = linkedEntries.iterator();

    return new Iterator<Map.Entry<K,V>>() {
      Map.Entry<K,V> entry;

      public boolean hasNext() {
        return delegateIterator.hasNext();
      }

      public Entry<K,V> next() {
        entry = delegateIterator.next();
        return entry;
      }

      public void remove() {
        /* Remove from iterator first to keep iterator valid. */
        delegateIterator.remove();
        LinkedHashMultimap.this.remove(entry.getKey(), entry.getValue());
      }
    };
  }

  @Override public LinkedHashMultimap<K,V> clone() {
    return new LinkedHashMultimap<K,V>(this); // okay because we're final
  }

  /*
   * The following methods simply call the superclass methods and are included
   * here for documentation purposes only.
   */

  /**
   * {@inheritDoc}
   *
   * <p>After calling this method, {@code key} and {@code values} come last in
   * the iteration order of the multimap's returned collections, even if the
   * key-value mappings were previously in the multimap.
   */
  @Override public Set<V> replaceValues(@Nullable K key,
      Iterable<? extends V> values) {
    return super.replaceValues(key, values);
  }

  /**
   * {@inheritDoc}
   *
   * <p>The iterator generated by the returned set traverses the entries in the
   * order they were added, overriding the ordering of {@link AbstractMultimap}.
   */
  @Override public Set<Entry<K,V>> entries() {
    return super.entries();
  }

  /**
   * {@inheritDoc}
   *
   * <p>The iterator generated by the returned collection traverses the values
   * in the order they were added, overriding the ordering of {@link
   * AbstractMultimap}.
   */
  @Override public Collection<V> values() {
    return super.values();
  }
}
